name: PHP Tests

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review

jobs:
  php5.6-tests-wp-4.7:
    name: PHP ${{ matrix.php }} / WordPress ${{ matrix.wordpress }} ${{ multisite && "(Multisite)" }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: ['7.4']
        wordpress: ['4.7', 'latest', 'nightly']
        include:
          # Run PHP 5.6 tests only for WordPress 4.7
          - wordpress: '4.7'
            php: '5.6'
          # Run multisite only for WordPress latest/PHP 7.4
          - wordpress: 'latest'
            multisite: '1'
            php: '7.4'
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: wordpress
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    env:
      DB_HOST: 127.0.0.1
      WP_DB_USER: root
      WP_DB_PASS: ''
      WP_DB_NAME: wordpress_test
      WP_MULTISITE: ${{ matrix.multisite }}
    steps:
      - uses: actions/checkout@v2
      - uses: shivammathur/setup-php@v2
        with:
          extensions: mysqli
          php-version: ${{ matrix.php }}
      - name: Create database
        env:
          MYSQL_TCP_PORT: ${{ job.services.mysql.ports[3306] }}
        run: |
          mysql -u root -h ${DB_HOST} -e "CREATE DATABASE ${WP_DB_NAME};"
          mysql -u root -h ${DB_HOST} -e "CREATE USER ${WP_DB_USER} IDENTIFIED BY '${WP_DB_PASS}';"
          mysql -u root -h ${DB_HOST} -e "GRANT ALL PRIVILEGES ON ${WP_DB_NAME}.* TO ${WP_DB_USER};"
      - name: Extract version from stable WordPress
        run: |
          curl -s http://api.wordpress.org/core/version-check/1.7/ > /tmp/wp-latest.json
          echo "WP_VERSION=$(grep -o '"version":"[^"]*' /tmp/wp-latest.json | sed 's/"version":"//')" >> $GITHUB_ENV
        if:
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Composer Install
        run: docker run --rm -v "$PWD:/app" -v "${{ steps.composer-cache.outputs.dir }}:/tmp/cache" composer install --no-interaction --no-progress
      - name: Set up PHP test data
        run: tests/bin/install-wp-tests.sh ${{ WP_DB_NAME }} ${{ WP_DB_USER }} ${{ WP_DB_PASS }} ${{ DB_HOST }} ${{ matrix.wordpress }}
      - name: Run Unit Tests
        run: composer test
